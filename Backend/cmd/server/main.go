package main

import (
    "fmt"
    "log"
    "os"

    "github.com/gin-gonic/gin"
    "github.com/joho/godotenv"
    "gorm.io/driver/postgres"
    "gorm.io/gorm"

    "github.com/leonidlivshits/football-tables/Backend/internal/repository/postgres/model"
)

func main() {
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å .env (–µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    if err := godotenv.Load(); err != nil {
        log.Println("‚ö†Ô∏è  .env not found, using environment variables")
    }

    // –°–æ–±–∏—Ä–∞–µ–º DSN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    dsn := fmt.Sprintf(
        "host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
        os.Getenv("DB_HOST"),
        os.Getenv("DB_PORT"),
        os.Getenv("DB_USER"),
        os.Getenv("DB_PASSWORD"),
        os.Getenv("DB_NAME"),
    )
    log.Printf("Connecting to %s:%s as %s/%s",
        os.Getenv("DB_HOST"), os.Getenv("DB_PORT"),
        os.Getenv("DB_USER"), os.Getenv("DB_NAME"),
    )

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º GORM
    db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
    if err != nil {
        log.Fatalf("Failed to connect to database: %v", err)
    }

    // –ê–≤—Ç–æ–º–∏–≥—Ä–∞—Ü–∏–∏
    if err := db.AutoMigrate(
		&model.Team{},
		&model.Group{},
		&model.Playoff{},
		&model.Stage{},   // —Å–Ω–∞—á–∞–ª–∞ stages
		&model.Match{},   // –ø–æ—Ç–æ–º matches
		&model.Table{},
    ); err != nil {
        log.Fatalf("Migration failed: %v", err)
    }
    log.Println("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    router := gin.Default()
    router.GET("/health", func(c *gin.Context) {
        c.JSON(200, gin.H{"status": "ok", "db": "connected"})
    })
    log.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É :8080")
    router.Run(":8080")
}
