package main

import (
	"fmt"
	"github.com/joho/godotenv"
	"github.com/vasyukov1/football-tables/backend/internal/config"
	"github.com/vasyukov1/football-tables/backend/internal/delivery/http/handler"
	"github.com/vasyukov1/football-tables/backend/internal/delivery/http/routes"
	"github.com/vasyukov1/football-tables/backend/internal/infrastructure/repository/postgres_repo"
	"github.com/vasyukov1/football-tables/backend/internal/infrastructure/repository/postgres_repo/model"
	"github.com/vasyukov1/football-tables/backend/internal/usecase"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"log"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ .env
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è  .env not found, using environment variables")
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
	cfg := config.Load()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
	db := initDB(cfg)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
	matchRepo := postgres_repo.NewMatchRepository(db)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è usecase
	matchUC := usecase.NewMatchUsecase(matchRepo)

	// Middleware
	//authMiddleware := middleware.NewAuthMiddleware(cfg.JWT.Secret)

	// Handlers
	matchHandler := handler.NewMatchHandler(matchUC)

	// –†–æ—É—Ç–µ—Ä
	router := routes.SetupAPIRouter(
		matchHandler,
		cfg,
	)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", cfg.HTTP.Port)
	_ = router.Run(":" + cfg.HTTP.Port)
}

func initDB(cfg *config.Config) *gorm.DB {
	dsn := buildDSN(cfg)
	log.Println("DSN:", dsn)

	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}

	// –ê–≤—Ç–æ–º–∏–≥—Ä–∞—Ü–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
	if err := db.AutoMigrate(
		&model.Team{},
		&model.Group{},
		&model.Playoff{},
		&model.Stage{},
		&model.Match{},
		&model.Table{},
	); err != nil {
		log.Fatalf("Migration failed: %v", err)
	}
	return db
}

func buildDSN(cfg *config.Config) string {
	return fmt.Sprintf(
		"host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		cfg.DB.Host,
		cfg.DB.Port,
		cfg.DB.User,
		cfg.DB.Password,
		cfg.DB.Name,
	)
}
